clc; clear all; close all;

% Continue following this guide: https://se.mathworks.com/help/ident/ug/industrial-three-degrees-of-freedom-robot-c-mex-file-modeling-of-mimo-system-using-vector-matrix-parameters.html

% Import data
% Data path
data_path = "dynamic_curves/freehand/";

t = readmatrix(data_path + 't.csv');
state = readmatrix(data_path + 'state.csv');
input = readmatrix(data_path + 'input.csv');
dt = t(2) - t(1);
% input_output_data = readtable(data_path + 'output.csv');
% c_L = readmatrix(data_path + 'c_L.csv');
% c_D = readmatrix(data_path + 'c_D.csv');
% AoA_rad = readmatrix(data_path + 'AoA_rad.csv');
% AoA_deg = AoA_rad .* (180 / pi);
% maneuver_length = readmatrix(data_path + 'maneuver_length.csv');
% dt = readmatrix(data_path + 'dt.csv');
% aggregated_maneuvers = readmatrix(data_path + 'aggregated_maneuvers.csv');
% num_maneuvers = length(AoA_rad) / maneuver_length;

q_NB = state(:,1:4);
w_B = state(:,5:7);
v_B = state(:,8:10);

eul = quat2eul(q_NB);
eul_deg = rad2deg(eul);

aileron_input = input(:,5);
elevator_input = input(:,6);
rudder_input = input(:,7);
pusher_motor_input = input(:,8);

% Move this into data_handler
rpm_pusher = calculate_rpm_pusher_motor(pusher_motor_input);
[aileron_angle_rad, elevator_angle_rad, rudder_angle_rad] = calculate_control_surface_angles(aileron_input, elevator_input, rudder_input);
u_fw = [aileron_angle_rad, elevator_angle_rad, rudder_angle_rad rpm_pusher];
u_mr = input(:,1:4);

% Prepare data for sysid
state = [q_NB w_B v_B];
input = [u_mr u_fw];

%% Create nonlinear grey box model

%%%%%
% Model parameters
%%%%%
aircraft_properties;

%%%%%
% Parameters
%%%%%

% Import initial guesses
initial_guesses;

ParName = {
    'g',                ...
    'rho_diam_top_pwr_four', ...
    'rho_diam_pusher_pwr_four', ...
    'rho_diam_top_pwr_five', ...
    'rho_diam_pusher_pwr_five', ...
    'half_rho_planform', ...
    'c_F_top',			...
    'c_F_pusher',         ...
    'c_Q_top',			...
    'c_Q_pusher',         ...
    'mass',					...
    'mean_chord_length',              ...
    'wingspan',					...
    'lam',				...
    'J_yy' ,            ...
    'r_t1_B',               ...
    'r_t2_B',				...
    'r_t3_B',				...
    'r_t4_B'				...
    'c_L_0',				...
    'c_L_alpha',      	...
    'c_L_q',          	...
    'c_L_delta_e',    	...
    'c_D_p',				...
    'c_D_alpha',				...
    'c_Y_p',				...
    'c_Y_r',				...
    'c_Y_delta_a',		...
    'c_Y_delta_r',		...
    'c_l_p',              ...
    'c_l_r',				...
    'c_l_delta_a',		...
    'c_l_delta_r',        ...
    'c_m_0',				...
    'c_m_alpha',          ...
    'c_m_q',				...
    'c_m_delta_e',		...
    'c_n_p',				...
    'c_n_r',				...
    'c_n_delta_a',		...
    'c_n_delta_r',        ...
};

ParValue = {
    g,                  ...
    rho_diam_top_pwr_four, ...
    rho_diam_pusher_pwr_four, ...
    rho_diam_top_pwr_five, ...
    rho_diam_pusher_pwr_five, ...
    half_rho_planform, ...
    c_T_top,			...
    c_T_pusher,         ...
    c_Q_top,			...
    c_Q_pusher,         ...
    mass_kg,					...
    mean_chord_length_m,              ...
    wingspan_m,					...
    lam,				...
    Jyy, ...
    r_t1_B,               ...
    r_t2_B,				...
    r_t3_B,				...
    r_t4_B,				...
    c_L_0,				...
    c_L_alpha,      	...
    c_L_q,          	...
    c_L_delta_e,    	...
    c_D_p,				...
    c_D_alpha,          ...
    c_Y_p,				...
    c_Y_r,				...
    c_Y_delta_a,		...
    c_Y_delta_r,		...
    c_l_p,              ...
    c_l_r,				...
    c_l_delta_a,		...
    c_l_delta_r,        ...
    c_m_0,				...
    c_m_alpha,          ...
    c_m_q,				...
    c_m_delta_e,		...
    c_n_p,				...
    c_n_r,				...
    c_n_delta_a,		...
    c_n_delta_r        ...
};

ParUnit = {
    'm/s^2',    ...
    '', ...
    '', ...
    '', ...
    '', ...
    '', ...
    '',			...
    '',			...
    '',			...
    '',			...
    'kg',			...
    'm',		...
    'm',		...
    '',			...
    '', ...
    'm',		...
    'm',		...
    'm',		...
    'm',		...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    '',			...
    ''
};

ParFixed = {
    true,... % g,                  ...
    true,... % rho_diam_top_pwr_four, ...
    true,... % rho_diam_pusher_pwr_four, ...
    true,... % rho_diam_top_pwr_five, ...
    true,... % rho_diam_pusher_pwr_five, ...
    true,... % half_rho_planform, ...
    true,... % c_T_top,			...
    true,... % c_T_pusher,         ...
    true,... % c_Q_top,			...
    true,... % c_Q_pusher,         ...
    true,... % mass_kg,					...
    true,... % mean_chord_length,              ...
    true,... % wingspan,					...
    true,... % lam,				...
    true,... % Jyy, ...
    true,... % r_t1_B,               ...
    true,... % r_t2_B,				...
    true,... % r_t3_B,				...
    true,... % r_t4_B,				...
    true,... % c_L_0,				...
    true,... % c_L_alpha,      	...
    false,... % c_L_q,          	...
    false,... % c_L_delta_e,    	...
    true,... % c_D_p,				...
    true,... % c_D_alpha,          ...
    true,... % c_Y_p,				...
    true,... % c_Y_r,				...
    true,... % c_Y_delta_a,		...
    true,... % c_Y_delta_r,		...
    false,... % c_l_p,              ...
    false,... % c_l_r,				...
    false,... % c_l_delta_a,		...
    false,... % c_l_delta_r,        ...
    false,... % c_m_0,				...
    false,... % c_m_alpha,          ...
    false,... % c_m_q,				...
    false,... % c_m_delta_e,		...
    false,... % c_n_p,				...
    false,... % c_n_r,				...
    false,... % c_n_delta_a,		...
    false,... % c_n_delta_r        ...  
};

ParMin = {
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,...
    -Inf,... 
    -Inf, ...
    -Inf, ...
    -Inf, ... % rt_4
     approx_zero,... % c_L_0,				...
     approx_zero,... % c_L_alpha,      	...
    -Inf,... % c_L_q,          	...
    -Inf,... % c_L_delta_e,    	...
    approx_zero, ... % c_D_p,				...
    approx_zero, ...% c_D_alpha,          ...
    -Inf,... % c_Y_p,				...
    -Inf,... % c_Y_r,				...
    -Inf,... % c_Y_delta_a,		...
    -Inf,... % c_Y_delta_r,		...
    -Inf,... % c_l_p,              ...
    -Inf,... % c_l_r,				...
    approx_zero,... % c_l_delta_a,		...
    -Inf,... % c_l_delta_r,        ...
    -Inf,... % c_m_0,				...
    -Inf,... % c_m_alpha,          ...
    -Inf,... % c_m_q,				...
    approx_zero,... % c_m_delta_e,		...
    -Inf,... % c_n_p,				...
    -Inf,... % c_n_r,				...
    -Inf,... % c_n_delta_a,		...
    approx_zero,... % c_n_delta_r        ...
};

ParMax = {
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,...
    Inf,... 
    Inf, ...
    Inf, ...
    Inf, ... % rt_4
    Inf,... % c_L_0,				...
    Inf,... % c_L_alpha,      	...
    Inf,... % c_L_q,          	...
    Inf,... % c_L_delta_e,    	...
    Inf, ... % c_D_p,				...
    Inf, ...% c_D_alpha,          ...
    Inf,... % c_Y_p,				...
    Inf,... % c_Y_r,				...
    Inf,... % c_Y_delta_a,		...
    Inf,... % c_Y_delta_r,		...
    -approx_zero,... % c_l_p,              ...
    Inf,... % c_l_r,				...
    Inf,... % c_l_delta_a,		...
    Inf,... % c_l_delta_r,        ...
    Inf,... % c_m_0,				...
    -approx_zero,... % c_m_alpha,          ...
    -approx_zero,... % c_m_q,				...
    Inf,... % c_m_delta_e,		...
    Inf,... % c_n_p,				...
    -approx_zero,... % c_n_r,				...
    Inf,... % c_n_delta_a,		...
    Inf,... % c_n_delta_r        ...
};

Parameters    = struct('Name', ParName, ...
    'Unit', ParUnit, ...
    'Value', ParValue, ...
    'Minimum', ParMin, ...
    'Maximum', ParMax, ...
    'Fixed', ParFixed);
               
%% Create model
FileName = 'vtol_linear_c';
Nx = 10; % number of states
Ny = 10; % number of outputs
Nu = 8; % number of inputs
Order = [Ny Nu Nx];

% Describe input
InputName = {'nt1', 'nt2', 'nt3', 'nt4',...
    'delta_a', 'delta_e', 'delta_r', 'np'};
InputUnit =  {'rpm', 'rpm', 'rpm', 'rpm', ...
    'rad', 'rad', 'rad', 'rpm'};

% Describe state (which is equal to output)
OutputName = {'q0', 'q1', 'q2', 'q3', ...
    'p', 'q', 'r', 'u', 'v', 'w'};
OutputUnit = {'', '', '', '', 'rad/s', 'rad/s', 'rad/s', ...
    'm/s', 'm/s', 'm/s'};

% Initial values
state_initial = state(1,:);

InitialStates = struct(...
    'Name', {'q0', 'q1', 'q2', 'q3', 'p', 'q', 'r', 'u', 'v', 'w'},...
    'Unit', {'', '', '', '', 'rad/s', 'rad/s', 'rad/s', 'm/s', 'm/s', 'm/s'}, ...
    'Value', {state(1,1), state(1,2), state(1,3), state(1,4), ...
        state(1,5), state(1,6), state(1,7), ...
        state(1,8), state(1,9), state(1,10)}, ...
    'Minimum', -Inf, 'Maximum', Inf, ...
    'Fixed', true); % Fix initial values
         
Ts = 0; % Continuous system

nlgr = idnlgrey(FileName, Order, Parameters, InitialStates, Ts, ...
    'Name', 'VTOL_aircraft', ...
    'InputName', InputName, 'InputUnit', InputUnit, ...
    'OutputName', OutputName, 'OutputUnit', OutputUnit, ...
    'TimeUnit', 's');

% Create sysid data object
z = iddata(state, input, dt, 'Name', 'VTOL-roll');
z.Name = 'VTOL Aircraft';
z.InputName = nlgr.InputName;
z.InputUnit = nlgr.InputUnit;
z.OutputName = nlgr.OutputName;
z.OutputUnit = nlgr.OutputUnit;
z.Tstart = 0;
z.TimeUnit = 's';

%figure('Name', [sysid_data.Name ': Aileron input -> Attitude output']);
%plot(sysid_data(:, 1:4, 5));   % Plot first input-output pair

%%

%compare(sysid_data, nlgr);
nlgr.SimulationOptions.Solver = 'ode1';
nlgr.SimulationOptions.FixedStep = 0.0001;
% GOAL:
%y = sim(nlgr, z);
compare(z, nlgr);
%predict(nlgr, sysid_data)
%%
opt = nlgreyestOptions();
opt.Display = 'on';
%opt.SearchOptions.MaxIterations = 40;
m2 = nlgreyest(sysid_data,nlgr,opt);

%%
predicted_state = y.y;
q_pred = predicted_state(:,1:4,:);
w_pred = predicted_state(:,5:7,:);
v_pred = predicted_state(:,8:10,:);
eul_pred = quat2eul(q_pred);

close all
figure
subplot(9,1,1)
plot(eul_pred(:,1)); hold on
plot(eul(:,1))
legend("yaw (estimated)", "yaw")

subplot(9,1,2)
plot(eul_pred(:,2)); hold on
plot(eul(:,2))
legend("pitch (estimated)", "pitch")

subplot(9,1,3)
plot(eul_pred(:,3)); hold on
plot(eul(:,3))
legend("roll (estimated)", "roll")

subplot(9,1,4)
plot(w_pred(:,1)); hold on
plot(w_B(:,1))
legend("p (estimated)", "p")

subplot(9,1,5)
plot(w_pred(:,2)); hold on
plot(w_B(:,2))
legend("q (estimated)", "q")

subplot(9,1,6)
plot(w_pred(:,3)); hold on
plot(w_B(:,3))
legend("r (estimated)", "r")

subplot(9,1,7)
plot(v_pred(:,1)); hold on
plot(v_B(:,1))
legend("u (estimated)", "u")

subplot(9,1,8)
plot(v_pred(:,2)); hold on
plot(v_B(:,2))
legend("v (estimated)", "v")

subplot(9,1,9)
plot(v_pred(:,3)); hold on
plot(v_B(:,3))
legend("w (estimated)", "w")



%figure('Name', [sysid_data.Name ': Aileron input -> Attitude output']);
%plot(sysid_data(:, 1:4, 5));   % Plot first input-output pair

